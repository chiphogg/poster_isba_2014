\documentclass[final,t]{beamer}

<<global_setup, include=FALSE>>=
require(ggplot2)
require(grid)
require(gridExtra)
require(reshape2)
require(knitr)

opts_chunk$set(cache=TRUE, autodep=TRUE)

theme_set(theme_grey(base_size=25))
theme_update(panel.background=theme_rect(fill='transparent', colour=NA),
             plot.background=theme_rect(fill='transparent', colour=NA))

source("interp.R")

line.size <- 1.5
basis.colors <- scale_colour_brewer(palette='Set1')
basis.theme <- theme(legend.position='none')
basis.plot <- function(mat, title) {
  d <- data.frame(y=as.vector(mat), t=t.out,
    label=rep(paste0('a', 1:N.frames), each=N.out))
  p <- (ggplot(data=d, aes(x=t, y=y, colour=label))
    + geom_hline(yintercept=0)
    + geom_line(size=line.size)
    + scale_x_continuous('', limits=c(0, N.frames))
    + scale_y_continuous('', limits=c(-1, 1), breaks=(-1):1)
    + basis.colors
    + basis.theme
    + ggtitle(title)
    + theme(axis.text.x=element_blank())
    )
  return (p)
}

MatrixPlot <- function(m) {
  # A ggplot2 plot object showing the matrix.
  return (ggplot(data=melt(m), aes(Var2, Var1, fill=value))
          + geom_raster()
          )
}
@

%% Examples:
%% http://www-i6.informatik.rwth-aachen.de/~dreuw/latexbeamerposter.php
\mode<presentation> {
  %% TODO(chogg): define my own theme
  %% (e.g. for big headlines using my own logos)
  \usetheme{I6pd2}
}
\usepackage[english]{babel}
\usepackage[latin1]{inputenc}
\usepackage{amsmath,amsthm,amssymb,latexsym}
\usepackage{pifont}
\newcommand{\cmark}{\ding{51}}%
\newcommand{\xmark}{\ding{55}}%
\usefonttheme[onlymath]{serif}
\boldmath
\usepackage[orientation=landscape,size=a0,scale=1.4,debug]{beamerposter}
\title[Smooth Animations]{\huge Smooth Animations to Visualize Gaussian Uncertainty}
\author{Charles~R.~Hogg~III}
\institute[Google]{Google, Inc.}
\date{July 16, 2014}
\begin{document}

\setlength{\leftmargini}{1.5em}

\begin{frame}[fragile]
  \vspace{-0.5em}
  \begin{columns}[T,onlytextwidth]

    % Left column.
    \begin{column}{.325\linewidth}

      \vbox to .698\textheight{%
      \begin{block}{Introduction}
        \vspace{-0.5em}
        \begin{itemize}
          \item \textbf{Goal:} Visualize uncertainty in \textit{curves and
            surfaces}
            \begin{itemize}
              \item Specifically: using \textbf{Gaussian processes}
                (see refresher at bottom)
            \end{itemize}
          \item \textbf{Approach:} animations
            \begin{itemize}
              \item Each frame shows one draw from posterior
              \item Consecutive frames show similar curves
                (i.e., \textit{continuous} animations)
              \item \textit{Reducible}:
                find \textbf{single ``Gaussian oscillator''};
                use copies as needed
            \end{itemize}
          \item \textbf{New Results:}
            \begin{itemize}
              \item \textbf{Smooth, keyframe-free} animations
              \item \textbf{New framework} for all future work in Gaussian
                animations
            \end{itemize}
        \end{itemize}
      \end{block}

      \vfill

      \begin{block}{Existing approach:
        interpolate between I.I.D. Gaussian draws}
        \vspace{-0.5em}
        Linear interpolation: \textbf{variance too small} between keyframes
<<interpolation, echo=FALSE, fig.width=13, fig.height=3.8>>=
quantiles.between.keyframes <- function(interp.mat, t, n.lines, title) {
  # Given an interpolating matrix, plot the lines it creates, along with their
  # quantiles.  (Statistically correct interpolations should yield flat
  # quantiles.)
  n.times <- nrow(interp.mat)
  n.randoms <- ncol(interp.mat)
  random.seeds <- matrix(rnorm(n=n.randoms * n.lines), nrow=n.randoms)

  # Compute the random lines and structure them into a data.frame.
  random.lines <- interp.mat %*% random.seeds
  df.random.lines <- data.frame(t=t,
                                y=as.vector(random.lines),
                                group=rep(1:n.lines, each=n.times))

  # Compute quantiles for the random lines at each timestep.
  quantiles.to.use <- c(0.10, 0.25, 0.50, 0.75, 0.90)
  n.quantiles <- length(quantiles.to.use)
  quantiles <- apply(random.lines, 1, quantile, probs=quantiles.to.use, type=4)
  df.quantiles <- data.frame(t=rep(t, each=n.quantiles),
                             y=as.vector(quantiles),
                             group=rep(1:n.quantiles, n.times))

  keyframe.range <- round(range(t))
  return (ggplot(data=df.random.lines, aes(x=t, y=y, group=group))
      + geom_line(colour='#999999')
      + geom_vline(xintercept=seq(from=keyframe.range[1],
                                  to=keyframe.range[2],
                                  by=1),
                   colour='black')
      + geom_line(data=df.quantiles, colour='purple')
      + coord_cartesian(ylim=3 * c(-1, 1))
      + theme(axis.text.y = element_blank(), axis.title.y = element_blank())
      + ggtitle(title)
      )
}
n.lines <- 1000
grid.arrange(quantiles.between.keyframes(interp.linear, t.out, n.lines,
                                         "(Naive) linear interpolation"),
             quantiles.between.keyframes(interp.esg, t.out, n.lines,
                                         "ESG interpolation"),
             ncol=2)
@
        \begin{itemize}
          \item Ehlschlaeger, Shortridge, Goodchild (\textbf{ESG})
            solved in 1997 (see right figure)
          \item Problem with \textit{both} approaches: keyframes are `special'
            \begin{itemize}
              \item Motion changes discontinuously
              \item Even at $\Delta t = 1$, correlation can be surprisingly high
                (up to 0.5)
            \end{itemize}
        \end{itemize}
      \end{block}

      \vfill

      \begin{block}{New approach: eliminate keyframes entirely}
        \vspace{-0.5em}
        \begin{itemize}
          \item Still use I.I.D. normals, $\{\epsilon_i\}$,
            but \textit{de-localize} rather than interpolate
        \end{itemize}
        \begin{equation*}
          f(t) = \frac{1}{\sqrt{N}} \sum_{i=1}^N
          \left[
            \epsilon_{2i-1}\sin\left(\frac{\pi i t}{N}\right) +
            \epsilon_{2i}  \cos\left(\frac{\pi i t}{N}\right)
          \right]
        \end{equation*}
        \begin{itemize}
          \item Correct statistical properties: 
            $\langle f(t) \rangle = 0$; \hspace{1em}
            $\langle f(t)^2 \rangle = 1$ \hspace{1em}
            $\forall t$
        \end{itemize}
      \end{block}

      }%
    \end{column}

    % Middle column.
    \begin{column}{.325\linewidth}

      \vbox to .698\textheight{%
      \begin{block}{Basis function view}
        \vspace{-0.8em}
        $$\textstyle f(t) = \sum\limits_{i=1}^N \epsilon_i b_i(t)$$
        \begin{table}
          \begin{tabular}{|l|c|c|c|}
            \hline
            Animation Method
            & \parbox[t][2.5em]{5em}{Statistically \\ Correct}
            & Stationary
            & Smooth \\
            \hline
<<basis_linear, echo=FALSE, fig.height=2.2>>=
print(basis.plot(interp.linear, 'Naive linear interpolation'))
@
            & {\Huge \color{red}{\xmark}} & {\Huge \color{red}{\xmark}} &
            {\Huge \color{red}{\xmark}} \\
            \hline
<<basis_esg, echo=FALSE, fig.height=2.2>>=
print(basis.plot(interp.esg, 'ESG interpolation'))
@
            & {\Huge \color{green}{\cmark}} & {\Huge \color{red}{\xmark}} &
            {\Huge \color{red}{\xmark}} \\
            \hline
<<basis_smooth, echo=FALSE, fig.height=2.2>>=
print(basis.plot(interp.smooth, 'Smooth timetraces'))
@
            & {\Huge \color{green}{\cmark}} & {\Huge \color{green}{\cmark}} &
            {\Huge \color{green}{\cmark}} \\
            \hline
          \end{tabular}
        \end{table}

      \end{block}

      \vfill

      \begin{block}{Physical motion: basic kinematics}
        {\small Check \textit{velocity} and \textit{acceleration} for a
        fuller picture of how these animations move:} \\
<<kinematics, echo=FALSE, fig.width=14, fig.height=5.7>>=
hacky_derivative <- function(mat, t, deriv=0) {
  # Take the derivative with respect to the rows.
  if (deriv == 0) {
    return (mat)
  }
  mat.aug <- rbind(mat, mat[1, ])
  t.aug <- c(t, t[1])
  hacky_derivative(diff(mat.aug) / diff(t.aug), t, deriv - 1)
}
graph <- function(label, interp.mat, deriv=0, scale=1, N.draws=60, seed=2,
                  show_keyframes=FALSE) {
  set.seed(seed)
  mat <- hacky_derivative(interp.mat, t=t.out, deriv=deriv)
  random.data <- matrix(rnorm(n=ncol(mat) * N.draws), ncol=N.draws)
  timetraces <- data.frame(y=as.vector(mat %*% random.data),
                           group=rep(1:N.draws, each=nrow(mat)),
                           t=t.out)
  first_timetrace <- timetraces[1:nrow(mat), ]
  p <- (ggplot(data=timetraces, aes(x=t, y=y, group=group))
        + geom_line(colour='#999999')
        + geom_line(data=first_timetrace)
        + scale_y_continuous("", breaks=scale * (-3):3)
        + scale_x_continuous("")
        + coord_cartesian(ylim=3 * ((pi / 2) ^ (2 * deriv)) * c(-1, 1))
        + theme(axis.text.x=element_blank())
        + theme(plot.margin=unit(rep(0.1, 4), "cm"))
        )
  if (show_keyframes) {
    p <- p + geom_point(data=data.frame(t=0:nrow(random.data),
                                        y=c(tail(random.data[, 1], 1),
                                            random.data[, 1])),
                        aes(x=t, y=y), inherit.aes=FALSE)
  }
  return (p)
}
graphs <- function(label, mat) {
  interpolating <- length(grep('Interpolation', label)) > 0
  list(graph(label, mat, deriv=0, scale=2, show_keyframes=interpolating),
       graph(label, mat, deriv=1, scale=5),
       graph(label, mat, deriv=2, scale=10))
}
graphs.lin <- graphs(label="Linear Interpolation", mat=interp.linear)
graphs.esg <- graphs(label="ESG Interpolation", mat=interp.esg)
graphs.smooth <- graphs(label="Smooth Timetraces", mat=interp.smooth)
quickie.text <- function(x) textGrob(x, just='center', gp=gpar(fontsize=25))
grid.arrange(quickie.text('Position'),
             quickie.text('Velocity'),
             quickie.text('Acceleration'),
             graphs.lin[[1]], graphs.lin[[2]], graphs.lin[[3]], 
             graphs.esg[[1]], graphs.esg[[2]], graphs.esg[[3]], 
             graphs.smooth[[1]], graphs.smooth[[2]], graphs.smooth[[3]],
             ncol=3,
             heights=c(0.2, 1, 1, 1))
@
        Motion is \textit{not different} at the keyframes
        \textbf{because they do not exist.}
      \end{block}

      }%
    \end{column}

    % Right column.
    \begin{column}{.325\linewidth}

      \vbox to .698\textheight{%
      \begin{block}{The true nature of $f(t)$}
        \begin{itemize}
          \item Observations about $f(t)$:
            \begin{itemize}
              \item Infinite set of Gaussian random variables
              \item Indexed by continuous variable, $t$
              \item Well-defined covariance between every pair of points:
                \begin{equation*}
                  \langle f(t) f(t + \tau) \rangle = \frac{1}{N} \sum_{i=1}^{N}
                  \left[ 
                    \cos \left( \frac{\pi i \tau}{N} \right)
                  \right]
                \end{equation*}
            \end{itemize}
          \item \textbf{Implication:} $f(t)$ is
            \textit{itself a Gaussian process}
            (in the \textit{time} domain)
          \item \textbf{Benefit:} Gaussian animations
            \textit{revealed to belong to a \\ well-studied framework}
            \begin{itemize}
              \item Future animations can leverage existing Gaussian Process
                work
                \\ (e.g., try new covariance functions)
            \end{itemize}
        \end{itemize}
      \end{block}

      \vfill

      \begin{block}{\texttt{R} implementation}
<<implementation, size='tiny', tidy=FALSE>>=
# Matrix to turn 2N random values into Gaussian oscillator.
GaussianOscillatorMatrix <- function(N, t) {
  (cbind(outer(t, 1:N, function(x, y) cos(pi * x * y / N)),
         outer(t, N:1, function(x, y) sin(pi * x * y / N)))
   / sqrt(N))
}
@
      \end{block}

      \vfill

      \begin{block}{Conclusions}
        \begin{itemize}
          \item First \textit{statistically correct} Gaussian animations with
            \textbf{smooth and \\ natural motion}
          \item Moving beyond interpolation: \textbf{keyframes entirely
            eliminated}
            
          \item \ \vspace{-1.2em} \\
            { \centering
              \textbf{Time-domain Gaussian Processes}
              \\ enable \textit{animated visualization} of 
              \\ \textbf{Space-domain Gaussian Processes}
              \begin{itemize}
                \item To eliminate keyframes,
                  use \textit{stationary} covariance function
              \end{itemize}
            }
        \end{itemize}
      \end{block}

      }%
    \end{column}

  \end{columns}

  \vspace{0.5em}
  \begin{beamercolorbox}[wd=0.9875\paperwidth]{sepline}
    \centering
    \rule{0pt}{3pt}
  \end{beamercolorbox}

  \begin{block}{Gaussian Processes refresher: Probabilities for Functions}
    \begin{columns}[T]
      \begin{column}{0.16\linewidth}
        \begin{itemize}
          \item Random curves and surfaces: \\
            \textit{infinitely many} random variables!
          \item \textbf{Gaussian Processes:} \\
            work with \textit{any \textbf{finite} subset}
            \begin{itemize}
              \item Assume \textit{joint Gaussian distribution}
            \end{itemize}
          \item Simple example: \\
            Start with 2 variables, \\
            work up from there...
        \end{itemize}
      \end{column}
      \begin{column}{0.12\linewidth}
<<scatterplot_function, echo=FALSE>>=
twod_scatterplot <- function(n, old=0) {
  # A 2d scatterplot of draws from a bivariate normal.
  #
  # Args:
  #   n: The number of points to plot
  #   old: The number of points considered "old" (might be greyed out).
  set.seed(1)
  covariance <- 0.8
  L <- t(chol(matrix(c(1, covariance, covariance, 1), nrow=2)))
  x <- L %*% matrix(rnorm(n=2 * n), nrow=2)
  d <- data.frame(x=x[1, ], y=x[2, ], type=c(rep('a', old), rep('b', n - old)))
  lim <- 3
  p <- (ggplot(data=d, aes(x=x, y=y, colour=type))
    + geom_point(size=2)
    + scale_x_continuous(expression(X[1]), limits=c(-lim, lim))
    + scale_y_continuous(expression(X[2]), limits=c(-lim, lim))
    + scale_colour_manual(values=c(a='grey40', b='black'))
    + theme(legend.position='none')
    + ggtitle("Scatterplot View")
    )
  return (p)
}
set.seed(1)
total.points <- 1200
old.points <- total.points - 50
suppressWarnings(print(twod_scatterplot(total.points, old.points)))
@
        \tiny
        \begin{itemize} \scriptsize
          \item Highly correlated $\rightarrow$ \textbf{close to diagonal}
          \item Works well for two variables
        \end{itemize}
      \end{column}
      \begin{column}{0.12\linewidth}
<<side_by_side, echo=FALSE>>=
twod_side_by_side <- function(n, old=0) {
  # A 2d scatterplot of draws from a bivariate normal.
  #
  # Args:
  #   n: The number of points to plot
  #   old: The number of points considered "old" (might be greyed out).
  set.seed(1)
  covariance <- 0.8
  L <- t(chol(matrix(c(1, covariance, covariance, 1), nrow=2)))
  x <- L %*% matrix(rnorm(n=2 * n), nrow=2)
  d <- data.frame(X1=x[1, ], X2=x[2, ], type=c(rep('a', old), rep('b', n - old)))
  d$id <- 1:nrow(d)
  d_melt <- melt(d, id.vars=c('id', 'type'))
  lim <- 3
  p <- (ggplot(data=d_melt, aes(x=variable, y=value, group=id, colour=type))
    + geom_point(size=4)
    + geom_line(size=1.5)
    + scale_x_discrete("variable", labels=c(expression(X[1]), expression(X[2])))
    + scale_y_continuous("value", limits=c(-lim, lim))
    + scale_colour_manual(values=c(a='grey40', b='black'))
    + theme(legend.position='none')
    + ggtitle("\"Side-by-side\" view")
    )
  return (p)
}
set.seed(1)
suppressWarnings(print(twod_side_by_side(total.points, old.points)))
@
        \begin{itemize} \scriptsize
          \item Highly correlated $\rightarrow$ \textbf{horizontal lines}
          \item Works well for more variables...
        \end{itemize}
      \end{column}
      \begin{column}{0.12\linewidth}
<<many_side_by_side, echo=FALSE>>=
x_sub <- function(i) {
  # Create 'expression' objects, X[i], for each i.  Useful for labeling.
  apply(array(i), 1, FUN=function(x) bquote(X[.(x + 0)]))
}
many_side_by_side <- function(k, n, i) {
  set.seed(3)
  X <- 1:k
  K <- 0.9 ^ abs(outer(X, X, function(x, y) (x - y) ^ 2))
  L <- t(chol(K))
  x <- L %*% matrix(rnorm(n=k * n), nrow=k)
  d <- data.frame(X=t(x))
  d$id <- 1:nrow(d)
  d$highlight = 'no'
  d$highlight[which(d$id == i)] = 'yes'
  require(reshape2)
  d_melt <- melt(d[which(d$id <= i), ], id.vars=c('id', 'highlight'))
  lim <- 3
  p <- (ggplot(data=d_melt, aes(x=as.numeric(substring(variable, 3)), y=value, group=id, colour=highlight))
    + geom_point(size=4)
    + geom_line(size=1.5)
    + scale_x_continuous("variable", breaks=1:k, labels=x_sub(1:k))
    + scale_y_continuous("value", limits=c(-lim, lim))
    + scale_colour_manual("", values=c(yes='red', no='grey50'))
    + theme(legend.position='none')
    + ggtitle("Many variables, side-by-side")
    )
  return (p)
}
set.seed(1)
print(many_side_by_side(8, 10, 10))
@
        \begin{itemize} \scriptsize
          \item Variables indexed by \textit{position}
        \end{itemize}
      \end{column}
      \begin{column}{0.12\linewidth}
<<covariance_matrix, echo=FALSE>>=
X <- seq(from=min(t.out), to=max(t.out), length.out=80)
m <- outer(X, X, function(x, y) exp(-1.5 * (x - y) ^ 2))
rownames(m) <- colnames(m) <- X
p <- (MatrixPlot(m)
      + scale_fill_gradient2('Covariance', limits=c(-1, 1))
      + scale_x_continuous(expression(X[1]))
      + scale_y_reverse(expression(X[2]))
      + coord_fixed(xlim=range(X), ylim=range(X))
      + ggtitle(paste0("Specify covariance\n",
                       "of every variable\n",
                       "with every other variable"))
      )
print(p)
@
      \end{column}
      \begin{column}{0.28\linewidth}
        \centering
        Get \textit{continuous} random function
        from \textit{I.I.D.} normal draws:
        \vspace{0.4em}
<<random_function_draw, echo=FALSE, fig.width=13, fig.height=5>>=
set.seed(3)
random.draws <- rnorm(n=nrow(m))
m.noisy <- m
diag(m.noisy) <- diag(m.noisy) + 1e-5
L <- t(chol(m.noisy))
random.function <- L %*% random.draws
PointPlot <- function(t, y) {
  return (ggplot(data=data.frame(t=t, y=y), aes(x=t, y=y))
          + geom_point()
          + scale_x_continuous('X')
          + scale_y_continuous('', limits=3 * c(-1, 1))
          )
}
suppressWarnings(grid.arrange(PointPlot(X, random.function)
                                 + ggtitle('Random function'),
                              grid.text('=', just='center',
                                        gp=gpar(fontsize=28)),
                              MatrixPlot(L)
                                  + ggtitle(paste0('Lower-Cholesky of\n',
                                                   'Covariance Matrix'))
                                  + scale_fill_gradient2(limits=c(-1, 1))
                                  + theme(legend.position='none')
                                  + scale_x_continuous('')
                                  + scale_y_reverse('')
                                  + coord_fixed(xlim=range(X),
                                                ylim=range(X))
                                  ,
                              grid.text('×', just='center',
                                        gp=gpar(fontsize=28)),
                              PointPlot(X, random.draws)
                                  + ggtitle('I.I.D. Normal Draws'),
                 nrow=1,
                 widths=c(1, 0.2, 1, 0.2, 1)))
@
      \end{column}
    \end{columns}
  \end{block}
\end{frame}
\end{document}
